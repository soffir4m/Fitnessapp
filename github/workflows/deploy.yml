name: Fitness API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: fitness_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Set up test environment
      run: |
        echo "DB_USER=root" >> .env
        echo "DB_PASSWORD=testpassword" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_NAME=fitness_test" >> .env
        echo "OPENWEATHER_API_KEY=test_key" >> .env
    
    - name: Run tests
      run: |
        pytest tests/ -v --tb=short
    
    - name: Test API endpoints
      run: |
        python -c "
        import asyncio
        from fastapi.testclient import TestClient
        from main import app
        
        client = TestClient(app)
        
        # Test básicos
        response = client.get('/')
        assert response.status_code == 200
        
        response = client.get('/programas/')
        assert response.status_code == 200
        
        print('Tests básicos pasaron correctamente')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-results.sarif'
        
    - name: Check for vulnerabilities
      run: |
        pip install safety
        safety check -r requirements.txt

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/fitness-api:latest
          ${{ secrets.DOCKER_USERNAME }}/fitness-api:${{ github.sha }}
    
    # Deploy to cloud (ejemplo con Railway)
    - name: Deploy to Railway
      uses: railwayapp/railway-deploy-action@v1.1.0
      with:
        service: fitness-api
        project: ${{ secrets.RAILWAY_PROJECT_ID }}
        token: ${{ secrets.RAILWAY_TOKEN }}
    
    # Alternativa: Deploy to Heroku
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.12
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "tu-app-fitness"
    #     heroku_email: "tu-email@ejemplo.com"
    #     usedocker: true

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful"
        else
          echo "❌ Deployment failed"
        fi